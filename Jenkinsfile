pipeline {
    agent {
        label 'docker'
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch to build')
    }

    tools {
        maven 'M3'
    }

    environment {
        DOCKER_IMAGE_NAME = 'task-tracker'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
    }


    stages {
        stage('Tools Verification') {
            steps {
                script {
                    echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∞–≥–µ–Ω—Ç–µ: ${env.NODE_NAME}"

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Java
                    sh '''
                        echo "=== Java ==="
                        java -version
                        echo "JAVA_HOME: ${JAVA_HOME}"
                    '''

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Maven
                    sh '''
                        echo "=== Maven ==="
                        mvn --version
                        which mvn
                    '''

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
                    sh '''
                        echo "=== Git ==="
                        git --version
                        which git
                    '''

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
                    sh '''
                        echo "=== Docker ==="
                        docker --version
                        which docker
                        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker daemon..."
                        docker ps > /dev/null && echo "‚úÖ Docker daemon –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "‚ùå Docker daemon –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    '''

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
                    sh '''
                        echo "=== Docker Compose ==="
                        docker-compose --version
                        which docker-compose
                    '''

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
                    sh '''
                        echo "=== –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ==="
                        df -h
                    '''

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∞–≤
                    sh '''
                        echo "=== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø—Ä–∞–≤–∞ ==="
                        whoami
                        id
                        pwd
                        echo "–ü—Ä–∞–≤–∞ –Ω–∞ Docker socket:"
                        ls -la /var/run/docker.sock 2>/dev/null || echo "Docker socket –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    '''
                }
            }
        }
        stage('Checkout & Build') {
            steps {
                git branch: "${params.BRANCH}",
                   url: 'https://github.com/ThomasWilson1903/TaskTracker'
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                    sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${DOCKER_IMAGE_NAME}:latest"
                }
            }
        }

        stage('Docker Compose Deploy') {
            steps {
                script {
                    sh '''
                        docker-compose down || true
                        docker-compose up -d --build --force-recreate
                    '''
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    sleep time: 120, unit: 'SECONDS'
                    sh 'curl -f http://twilson.ru:8080/actuator/health || echo "Application health check failed but continuing..."'
                }
            }
        }
    }

    post {
        always {
            sh '''
                docker system prune -f || true
                docker volume prune -f || true
            '''
        }
        success {
            echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ! Image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
        }
        failure {
            echo '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏'
            sh '''
                docker ps -a
                docker-compose logs || true
            '''
        }
    }
}